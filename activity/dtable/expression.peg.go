package dtable

// Code generated by peg expression.peg DO NOT EDIT.

import (
	"fmt"
	"io"
	"os"
	"sort"
	"strconv"
)

const endSymbol rune = 1114112

/* The rule types inferred from the grammar are below. */
type pegRule uint8

const (
	ruleUnknown pegRule = iota
	rulee
	rulee1
	rulee2
	rulee3
	rulee4
	rulename
	ruleand
	ruleor
	ruleeq
	ruleneq
	rulegt
	rulegte
	rulelt
	rulelte
	ruleopen
	ruleclose
	rulesp
	ruleAction0
	ruleAction1
	ruleAction2
	ruleAction3
	ruleAction4
	ruleAction5
	ruleAction6
	ruleAction7
	ruleAction8
	rulePegText
	ruleAction9
)

var rul3s = [...]string{
	"Unknown",
	"e",
	"e1",
	"e2",
	"e3",
	"e4",
	"name",
	"and",
	"or",
	"eq",
	"neq",
	"gt",
	"gte",
	"lt",
	"lte",
	"open",
	"close",
	"sp",
	"Action0",
	"Action1",
	"Action2",
	"Action3",
	"Action4",
	"Action5",
	"Action6",
	"Action7",
	"Action8",
	"PegText",
	"Action9",
}

type token32 struct {
	pegRule
	begin, end uint32
}

func (t *token32) String() string {
	return fmt.Sprintf("\x1B[34m%v\x1B[m %v %v", rul3s[t.pegRule], t.begin, t.end)
}

type node32 struct {
	token32
	up, next *node32
}

func (node *node32) print(w io.Writer, pretty bool, buffer string) {
	var print func(node *node32, depth int)
	print = func(node *node32, depth int) {
		for node != nil {
			for c := 0; c < depth; c++ {
				fmt.Fprintf(w, " ")
			}
			rule := rul3s[node.pegRule]
			quote := strconv.Quote(string(([]rune(buffer)[node.begin:node.end])))
			if !pretty {
				fmt.Fprintf(w, "%v %v\n", rule, quote)
			} else {
				fmt.Fprintf(w, "\x1B[34m%v\x1B[m %v\n", rule, quote)
			}
			if node.up != nil {
				print(node.up, depth+1)
			}
			node = node.next
		}
	}
	print(node, 0)
}

func (node *node32) Print(w io.Writer, buffer string) {
	node.print(w, false, buffer)
}

func (node *node32) PrettyPrint(w io.Writer, buffer string) {
	node.print(w, true, buffer)
}

type tokens32 struct {
	tree []token32
}

func (t *tokens32) Trim(length uint32) {
	t.tree = t.tree[:length]
}

func (t *tokens32) Print() {
	for _, token := range t.tree {
		fmt.Println(token.String())
	}
}

func (t *tokens32) AST() *node32 {
	type element struct {
		node *node32
		down *element
	}
	tokens := t.Tokens()
	var stack *element
	for _, token := range tokens {
		if token.begin == token.end {
			continue
		}
		node := &node32{token32: token}
		for stack != nil && stack.node.begin >= token.begin && stack.node.end <= token.end {
			stack.node.next = node.up
			node.up = stack.node
			stack = stack.down
		}
		stack = &element{node: node, down: stack}
	}
	if stack != nil {
		return stack.node
	}
	return nil
}

func (t *tokens32) PrintSyntaxTree(buffer string) {
	t.AST().Print(os.Stdout, buffer)
}

func (t *tokens32) WriteSyntaxTree(w io.Writer, buffer string) {
	t.AST().Print(w, buffer)
}

func (t *tokens32) PrettyPrintSyntaxTree(buffer string) {
	t.AST().PrettyPrint(os.Stdout, buffer)
}

func (t *tokens32) Add(rule pegRule, begin, end, index uint32) {
	tree, i := t.tree, int(index)
	if i >= len(tree) {
		t.tree = append(tree, token32{pegRule: rule, begin: begin, end: end})
		return
	}
	tree[i] = token32{pegRule: rule, begin: begin, end: end}
}

func (t *tokens32) Tokens() []token32 {
	return t.tree
}

type Expr struct {
	Expression

	Buffer string
	buffer []rune
	rules  [29]func() bool
	parse  func(rule ...int) error
	reset  func()
	Pretty bool
	tokens32
}

func (p *Expr) Parse(rule ...int) error {
	return p.parse(rule...)
}

func (p *Expr) Reset() {
	p.reset()
}

type textPosition struct {
	line, symbol int
}

type textPositionMap map[int]textPosition

func translatePositions(buffer []rune, positions []int) textPositionMap {
	length, translations, j, line, symbol := len(positions), make(textPositionMap, len(positions)), 0, 1, 0
	sort.Ints(positions)

search:
	for i, c := range buffer {
		if c == '\n' {
			line, symbol = line+1, 0
		} else {
			symbol++
		}
		if i == positions[j] {
			translations[positions[j]] = textPosition{line, symbol}
			for j++; j < length; j++ {
				if i != positions[j] {
					continue search
				}
			}
			break search
		}
	}

	return translations
}

type parseError struct {
	p   *Expr
	max token32
}

func (e *parseError) Error() string {
	tokens, err := []token32{e.max}, "\n"
	positions, p := make([]int, 2*len(tokens)), 0
	for _, token := range tokens {
		positions[p], p = int(token.begin), p+1
		positions[p], p = int(token.end), p+1
	}
	translations := translatePositions(e.p.buffer, positions)
	format := "parse error near %v (line %v symbol %v - line %v symbol %v):\n%v\n"
	if e.p.Pretty {
		format = "parse error near \x1B[34m%v\x1B[m (line %v symbol %v - line %v symbol %v):\n%v\n"
	}
	for _, token := range tokens {
		begin, end := int(token.begin), int(token.end)
		err += fmt.Sprintf(format,
			rul3s[token.pegRule],
			translations[begin].line, translations[begin].symbol,
			translations[end].line, translations[end].symbol,
			strconv.Quote(string(e.p.buffer[begin:end])))
	}

	return err
}

func (p *Expr) PrintSyntaxTree() {
	if p.Pretty {
		p.tokens32.PrettyPrintSyntaxTree(p.Buffer)
	} else {
		p.tokens32.PrintSyntaxTree(p.Buffer)
	}
}

func (p *Expr) WriteSyntaxTree(w io.Writer) {
	p.tokens32.WriteSyntaxTree(w, p.Buffer)
}

func (p *Expr) Execute() {
	buffer, _buffer, text, begin, end := p.Buffer, p.buffer, "", 0, 0
	for _, token := range p.Tokens() {
		switch token.pegRule {

		case rulePegText:
			begin, end = int(token.begin), int(token.end)
			text = string(_buffer[begin:end])

		case ruleAction0:
			p.AddOperator(TypeOr)
		case ruleAction1:
			p.AddOperator(TypeAnd)
		case ruleAction2:
			p.AddOperator(TypeEq)
		case ruleAction3:
			p.AddOperator(TypeNEq)
		case ruleAction4:
			p.AddOperator(TypeGte)
		case ruleAction5:
			p.AddOperator(TypeGt)
		case ruleAction6:
			p.AddOperator(TypeLte)
		case ruleAction7:
			p.AddOperator(TypeLt)
		case ruleAction8:
			p.AddOperator(TypeEq)
		case ruleAction9:
			p.AddLiteral(buffer[begin:end])

		}
	}
	_, _, _, _, _ = buffer, _buffer, text, begin, end
}

func Pretty(pretty bool) func(*Expr) error {
	return func(p *Expr) error {
		p.Pretty = pretty
		return nil
	}
}

func Size(size int) func(*Expr) error {
	return func(p *Expr) error {
		p.tokens32 = tokens32{tree: make([]token32, 0, size)}
		return nil
	}
}
func (p *Expr) Init(options ...func(*Expr) error) error {
	var (
		max                  token32
		position, tokenIndex uint32
		buffer               []rune
	)
	for _, option := range options {
		err := option(p)
		if err != nil {
			return err
		}
	}
	p.reset = func() {
		max = token32{}
		position, tokenIndex = 0, 0

		p.buffer = []rune(p.Buffer)
		if len(p.buffer) == 0 || p.buffer[len(p.buffer)-1] != endSymbol {
			p.buffer = append(p.buffer, endSymbol)
		}
		buffer = p.buffer
	}
	p.reset()

	_rules := p.rules
	tree := p.tokens32
	p.parse = func(rule ...int) error {
		r := 1
		if len(rule) > 0 {
			r = rule[0]
		}
		matches := p.rules[r]()
		p.tokens32 = tree
		if matches {
			p.Trim(tokenIndex)
			return nil
		}
		return &parseError{p, max}
	}

	add := func(rule pegRule, begin uint32) {
		tree.Add(rule, begin, position, tokenIndex)
		tokenIndex++
		if begin != position && position > max.end {
			max = token32{rule, begin, position}
		}
	}

	matchDot := func() bool {
		if buffer[position] != endSymbol {
			position++
			return true
		}
		return false
	}

	/*matchChar := func(c byte) bool {
		if buffer[position] == c {
			position++
			return true
		}
		return false
	}*/

	/*matchRange := func(lower byte, upper byte) bool {
		if c := buffer[position]; c >= lower && c <= upper {
			position++
			return true
		}
		return false
	}*/

	_rules = [...]func() bool{
		nil,
		/* 0 e <- <(sp e1 !.)> */
		func() bool {
			position0, tokenIndex0 := position, tokenIndex
			{
				position1 := position
				if !_rules[rulesp]() {
					goto l0
				}
				if !_rules[rulee1]() {
					goto l0
				}
				{
					position2, tokenIndex2 := position, tokenIndex
					if !matchDot() {
						goto l2
					}
					goto l0
				l2:
					position, tokenIndex = position2, tokenIndex2
				}
				add(rulee, position1)
			}
			return true
		l0:
			position, tokenIndex = position0, tokenIndex0
			return false
		},
		/* 1 e1 <- <(e2 (or e2 Action0)*)> */
		func() bool {
			position3, tokenIndex3 := position, tokenIndex
			{
				position4 := position
				if !_rules[rulee2]() {
					goto l3
				}
			l5:
				{
					position6, tokenIndex6 := position, tokenIndex
					if !_rules[ruleor]() {
						goto l6
					}
					if !_rules[rulee2]() {
						goto l6
					}
					if !_rules[ruleAction0]() {
						goto l6
					}
					goto l5
				l6:
					position, tokenIndex = position6, tokenIndex6
				}
				add(rulee1, position4)
			}
			return true
		l3:
			position, tokenIndex = position3, tokenIndex3
			return false
		},
		/* 2 e2 <- <(e3 (and e3 Action1)*)> */
		func() bool {
			position7, tokenIndex7 := position, tokenIndex
			{
				position8 := position
				if !_rules[rulee3]() {
					goto l7
				}
			l9:
				{
					position10, tokenIndex10 := position, tokenIndex
					if !_rules[ruleand]() {
						goto l10
					}
					if !_rules[rulee3]() {
						goto l10
					}
					if !_rules[ruleAction1]() {
						goto l10
					}
					goto l9
				l10:
					position, tokenIndex = position10, tokenIndex10
				}
				add(rulee2, position8)
			}
			return true
		l7:
			position, tokenIndex = position7, tokenIndex7
			return false
		},
		/* 3 e3 <- <((eq e4 Action2) / (neq e4 Action3) / (gte e4 Action4) / (gt e4 Action5) / (lte e4 Action6) / (lt e4 Action7) / (open e1 close) / (e4 Action8))> */
		func() bool {
			position11, tokenIndex11 := position, tokenIndex
			{
				position12 := position
				{
					position13, tokenIndex13 := position, tokenIndex
					if !_rules[ruleeq]() {
						goto l14
					}
					if !_rules[rulee4]() {
						goto l14
					}
					if !_rules[ruleAction2]() {
						goto l14
					}
					goto l13
				l14:
					position, tokenIndex = position13, tokenIndex13
					if !_rules[ruleneq]() {
						goto l15
					}
					if !_rules[rulee4]() {
						goto l15
					}
					if !_rules[ruleAction3]() {
						goto l15
					}
					goto l13
				l15:
					position, tokenIndex = position13, tokenIndex13
					if !_rules[rulegte]() {
						goto l16
					}
					if !_rules[rulee4]() {
						goto l16
					}
					if !_rules[ruleAction4]() {
						goto l16
					}
					goto l13
				l16:
					position, tokenIndex = position13, tokenIndex13
					if !_rules[rulegt]() {
						goto l17
					}
					if !_rules[rulee4]() {
						goto l17
					}
					if !_rules[ruleAction5]() {
						goto l17
					}
					goto l13
				l17:
					position, tokenIndex = position13, tokenIndex13
					if !_rules[rulelte]() {
						goto l18
					}
					if !_rules[rulee4]() {
						goto l18
					}
					if !_rules[ruleAction6]() {
						goto l18
					}
					goto l13
				l18:
					position, tokenIndex = position13, tokenIndex13
					if !_rules[rulelt]() {
						goto l19
					}
					if !_rules[rulee4]() {
						goto l19
					}
					if !_rules[ruleAction7]() {
						goto l19
					}
					goto l13
				l19:
					position, tokenIndex = position13, tokenIndex13
					if !_rules[ruleopen]() {
						goto l20
					}
					if !_rules[rulee1]() {
						goto l20
					}
					if !_rules[ruleclose]() {
						goto l20
					}
					goto l13
				l20:
					position, tokenIndex = position13, tokenIndex13
					if !_rules[rulee4]() {
						goto l11
					}
					if !_rules[ruleAction8]() {
						goto l11
					}
				}
			l13:
				add(rulee3, position12)
			}
			return true
		l11:
			position, tokenIndex = position11, tokenIndex11
			return false
		},
		/* 4 e4 <- <(<name> sp Action9)> */
		func() bool {
			position21, tokenIndex21 := position, tokenIndex
			{
				position22 := position
				{
					position23 := position
					if !_rules[rulename]() {
						goto l21
					}
					add(rulePegText, position23)
				}
				if !_rules[rulesp]() {
					goto l21
				}
				if !_rules[ruleAction9]() {
					goto l21
				}
				add(rulee4, position22)
			}
			return true
		l21:
			position, tokenIndex = position21, tokenIndex21
			return false
		},
		/* 5 name <- <([a-z] / [A-Z] / '_' / [0-9] / '\'' / '"')*> */
		func() bool {
			{
				position25 := position
			l26:
				{
					position27, tokenIndex27 := position, tokenIndex
					{
						position28, tokenIndex28 := position, tokenIndex
						if c := buffer[position]; c < rune('a') || c > rune('z') {
							goto l29
						}
						position++
						goto l28
					l29:
						position, tokenIndex = position28, tokenIndex28
						if c := buffer[position]; c < rune('A') || c > rune('Z') {
							goto l30
						}
						position++
						goto l28
					l30:
						position, tokenIndex = position28, tokenIndex28
						if buffer[position] != rune('_') {
							goto l31
						}
						position++
						goto l28
					l31:
						position, tokenIndex = position28, tokenIndex28
						if c := buffer[position]; c < rune('0') || c > rune('9') {
							goto l32
						}
						position++
						goto l28
					l32:
						position, tokenIndex = position28, tokenIndex28
						if buffer[position] != rune('\'') {
							goto l33
						}
						position++
						goto l28
					l33:
						position, tokenIndex = position28, tokenIndex28
						if buffer[position] != rune('"') {
							goto l27
						}
						position++
					}
				l28:
					goto l26
				l27:
					position, tokenIndex = position27, tokenIndex27
				}
				add(rulename, position25)
			}
			return true
		},
		/* 6 and <- <('&' '&' sp)> */
		func() bool {
			position34, tokenIndex34 := position, tokenIndex
			{
				position35 := position
				if buffer[position] != rune('&') {
					goto l34
				}
				position++
				if buffer[position] != rune('&') {
					goto l34
				}
				position++
				if !_rules[rulesp]() {
					goto l34
				}
				add(ruleand, position35)
			}
			return true
		l34:
			position, tokenIndex = position34, tokenIndex34
			return false
		},
		/* 7 or <- <('|' '|' sp)> */
		func() bool {
			position36, tokenIndex36 := position, tokenIndex
			{
				position37 := position
				if buffer[position] != rune('|') {
					goto l36
				}
				position++
				if buffer[position] != rune('|') {
					goto l36
				}
				position++
				if !_rules[rulesp]() {
					goto l36
				}
				add(ruleor, position37)
			}
			return true
		l36:
			position, tokenIndex = position36, tokenIndex36
			return false
		},
		/* 8 eq <- <('=' '=' sp)> */
		func() bool {
			position38, tokenIndex38 := position, tokenIndex
			{
				position39 := position
				if buffer[position] != rune('=') {
					goto l38
				}
				position++
				if buffer[position] != rune('=') {
					goto l38
				}
				position++
				if !_rules[rulesp]() {
					goto l38
				}
				add(ruleeq, position39)
			}
			return true
		l38:
			position, tokenIndex = position38, tokenIndex38
			return false
		},
		/* 9 neq <- <('!' '=' sp)> */
		func() bool {
			position40, tokenIndex40 := position, tokenIndex
			{
				position41 := position
				if buffer[position] != rune('!') {
					goto l40
				}
				position++
				if buffer[position] != rune('=') {
					goto l40
				}
				position++
				if !_rules[rulesp]() {
					goto l40
				}
				add(ruleneq, position41)
			}
			return true
		l40:
			position, tokenIndex = position40, tokenIndex40
			return false
		},
		/* 10 gt <- <('>' sp)> */
		func() bool {
			position42, tokenIndex42 := position, tokenIndex
			{
				position43 := position
				if buffer[position] != rune('>') {
					goto l42
				}
				position++
				if !_rules[rulesp]() {
					goto l42
				}
				add(rulegt, position43)
			}
			return true
		l42:
			position, tokenIndex = position42, tokenIndex42
			return false
		},
		/* 11 gte <- <('>' '=' sp)> */
		func() bool {
			position44, tokenIndex44 := position, tokenIndex
			{
				position45 := position
				if buffer[position] != rune('>') {
					goto l44
				}
				position++
				if buffer[position] != rune('=') {
					goto l44
				}
				position++
				if !_rules[rulesp]() {
					goto l44
				}
				add(rulegte, position45)
			}
			return true
		l44:
			position, tokenIndex = position44, tokenIndex44
			return false
		},
		/* 12 lt <- <('<' sp)> */
		func() bool {
			position46, tokenIndex46 := position, tokenIndex
			{
				position47 := position
				if buffer[position] != rune('<') {
					goto l46
				}
				position++
				if !_rules[rulesp]() {
					goto l46
				}
				add(rulelt, position47)
			}
			return true
		l46:
			position, tokenIndex = position46, tokenIndex46
			return false
		},
		/* 13 lte <- <('<' '=' sp)> */
		func() bool {
			position48, tokenIndex48 := position, tokenIndex
			{
				position49 := position
				if buffer[position] != rune('<') {
					goto l48
				}
				position++
				if buffer[position] != rune('=') {
					goto l48
				}
				position++
				if !_rules[rulesp]() {
					goto l48
				}
				add(rulelte, position49)
			}
			return true
		l48:
			position, tokenIndex = position48, tokenIndex48
			return false
		},
		/* 14 open <- <('(' sp)> */
		func() bool {
			position50, tokenIndex50 := position, tokenIndex
			{
				position51 := position
				if buffer[position] != rune('(') {
					goto l50
				}
				position++
				if !_rules[rulesp]() {
					goto l50
				}
				add(ruleopen, position51)
			}
			return true
		l50:
			position, tokenIndex = position50, tokenIndex50
			return false
		},
		/* 15 close <- <(')' sp)> */
		func() bool {
			position52, tokenIndex52 := position, tokenIndex
			{
				position53 := position
				if buffer[position] != rune(')') {
					goto l52
				}
				position++
				if !_rules[rulesp]() {
					goto l52
				}
				add(ruleclose, position53)
			}
			return true
		l52:
			position, tokenIndex = position52, tokenIndex52
			return false
		},
		/* 16 sp <- <(' ' / '\t')*> */
		func() bool {
			{
				position55 := position
			l56:
				{
					position57, tokenIndex57 := position, tokenIndex
					{
						position58, tokenIndex58 := position, tokenIndex
						if buffer[position] != rune(' ') {
							goto l59
						}
						position++
						goto l58
					l59:
						position, tokenIndex = position58, tokenIndex58
						if buffer[position] != rune('\t') {
							goto l57
						}
						position++
					}
				l58:
					goto l56
				l57:
					position, tokenIndex = position57, tokenIndex57
				}
				add(rulesp, position55)
			}
			return true
		},
		/* 18 Action0 <- <{ p.AddOperator(TypeOr) }> */
		func() bool {
			{
				add(ruleAction0, position)
			}
			return true
		},
		/* 19 Action1 <- <{ p.AddOperator(TypeAnd) }> */
		func() bool {
			{
				add(ruleAction1, position)
			}
			return true
		},
		/* 20 Action2 <- <{ p.AddOperator(TypeEq) }> */
		func() bool {
			{
				add(ruleAction2, position)
			}
			return true
		},
		/* 21 Action3 <- <{ p.AddOperator(TypeNEq) }> */
		func() bool {
			{
				add(ruleAction3, position)
			}
			return true
		},
		/* 22 Action4 <- <{ p.AddOperator(TypeGte) }> */
		func() bool {
			{
				add(ruleAction4, position)
			}
			return true
		},
		/* 23 Action5 <- <{ p.AddOperator(TypeGt) }> */
		func() bool {
			{
				add(ruleAction5, position)
			}
			return true
		},
		/* 24 Action6 <- <{ p.AddOperator(TypeLte) }> */
		func() bool {
			{
				add(ruleAction6, position)
			}
			return true
		},
		/* 25 Action7 <- <{ p.AddOperator(TypeLt) }> */
		func() bool {
			{
				add(ruleAction7, position)
			}
			return true
		},
		/* 26 Action8 <- <{ p.AddOperator(TypeEq) }> */
		func() bool {
			{
				add(ruleAction8, position)
			}
			return true
		},
		nil,
		/* 28 Action9 <- <{ p.AddLiteral(buffer[begin:end]) }> */
		func() bool {
			{
				add(ruleAction9, position)
			}
			return true
		},
	}
	p.rules = _rules
	return nil
}
